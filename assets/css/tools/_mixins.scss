///*------------------------------------*\
//    #MIXINS
//\*------------------------------------*/

// Spit out vendor prefixes in one go. Very pragmatic, far from perfect.
@mixin vendor($property, $value...) {
    -webkit-#{$property}: $value;
       -moz-#{$property}: $value;
            #{$property}: $value;
}

// Apply ‘attention’ styles in one go.
@mixin attention($self: false) {

    @if($self != false) {

        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

    @else {

        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

}

// Generate Open Sans's numbered font-weights from their aliases.
@mixin font-weight($font-weight) {

  @if ($font-weight == "light") {
        font-weight: 300;
    }
  @if ($font-weight == "regular") {
        font-weight: 400;
    }
  @if ($font-weight == "semi-bold") {
        font-weight: 600;
    }
  @if ($font-weight == "bold") {
        font-weight: 700;
    }
  @if ($font-weight == "extra-bold") {
        font-weight: 800;
    }
}

// Create all specified heading styles in one go.
@mixin headings($from: 1, $to: 6) {

    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{

        @for $i from $from through $to{

            h#{$i} {
                @extend %base-heading;
            }

        }

    }

}

// Clearfix mixin for use later in the project
// ===========================================
@mixin clearfix() {

  &::after {
    content: "";
    display: table;
    clear: both;
  }

}

///* ========================================================================
//   #FONT-SIZE
//   ======================================================================== */

// Generate a font-size and baseline-compatible line-height.
@mixin font-size($font-size, $line-height: auto, $important: false) {

  @if (type-of($font-size) == number) {
    @if (unit($font-size) != "px") {
      @error "`#{$font-size}` needs to be a pixel value.";
    }
  } @else {
    @error "`#{$font-size}` needs to be a number.";
  }

  @if ($important == true) {
    $important: !important;
  } @elseif ($important == false) {
    $important: null;
  } @else {
    @error "`#{$important}` needs to be `true` or `false`."
  }

  // We provide a `px` fallback for old IEs not supporting `rem` values.
  font-size: $font-size $important;
  font-size: ($font-size / $global-font-size) * 1rem $important;

  @if ($line-height == 'auto') {
    // line-height: ceil($font-size / $global-line-height) * ($global-line-height / $font-size) $important;
    line-height:1.5;
  }

  @else {

    @if (type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {
      line-height: $line-height $important;
    }

    @elseif ($line-height != 'none' and $line-height != false) {
      @error "D’oh! `#{$line-height}` is not a valid value for `$line-height`."
    }

  }

}